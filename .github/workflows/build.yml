name: Build Zuno

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      zuno_version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y cmake build-essential libasio-dev libssl-dev

    - name: Build and extract version
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DZUNO_BUILD_TOOLS=1
        make
      shell: bash

    - name: Get Zuno version
      id: get_version
      run: |
        cd build
        VERSION=$(./print_version)
        echo "ZUNO_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      ZUNO_VERSION: ${{ needs.version.outputs.zuno_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt update && sudo apt install -y cmake build-essential libasio-dev libssl-dev

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake openssl@3
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "CMAKE_INCLUDE_PATH=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
        echo "CMAKE_LIBRARY_PATH=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install cmake openssl.light

    - name: Build project
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: zuno-${{ runner.os }}-${{ env.ZUNO_VERSION }}
        path: |
          build/*.a
          build/*.lib
          build/*.dll
          build/*.dylib
          build/*.so
          build/*.h
          !**/*.cpp

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    env:
      ZUNO_VERSION: ${{ needs.version.outputs.zuno_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Create Git tag
      run: |
        git fetch --tags
        git tag v${{ env.ZUNO_VERSION }}
        git push origin v${{ env.ZUNO_VERSION }}
    
    - name: Wait for GitHub to register tag
      run: sleep 5

    - name: Generate changelog from commits
      id: changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          LOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          LOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s" --no-merges)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$LOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: List downloaded artifacts
      run: ls -R ./artifacts

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.ZUNO_VERSION }}
        name: Zuno Release v${{ env.ZUNO_VERSION }}
        body: |
          ðŸš€ New release of the Zuno library.
          - Version: v${{ env.ZUNO_VERSION }}

          ## Changes
          ${{ env.CHANGELOG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload compiled libraries
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.ZUNO_VERSION }}
        files: |
          artifacts/**/*.a
          artifacts/**/*.lib
          artifacts/**/*.dll
          artifacts/**/*.dylib
          artifacts/**/*.so
          artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
